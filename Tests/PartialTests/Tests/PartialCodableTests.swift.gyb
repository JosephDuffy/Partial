% import string
import Quick
import Nimble
import Foundation

@testable
import Partial

final class PartialCodableTests: QuickSpec {
    override func spec() {
        describe("PartialCodable") {
% parameterCountList = range(16)
% for parameterCount in parameterCountList:
%     parametersRange = range(parameterCount + 1)
            context("with ${parameterCount + 1} property") {
                struct CodableType: Codable, PartialCodable, Hashable {
                    @KeyPathCodingKeyCollectionBuilder<Self, CodingKeys>
                    static var keyPathCodingKeyCollection: KeyPathCodingKeyCollection<Self, CodingKeys> {
%     for characterIndex in parametersRange:
%         character = string.ascii_uppercase[characterIndex]
                        (\Self.string${character}, CodingKeys.string${character})
%     end
                    }

%     for characterIndex in parametersRange:
%         character = string.ascii_uppercase[characterIndex]
                    let string${character}: String
%     end
                }

                var partial: Partial<CodableType>!

                beforeEach {
                    partial = Partial()
                }

                context("with complete value") {
                    beforeEach {
%     for characterIndex in parametersRange:
%         character = string.ascii_uppercase[characterIndex]
                        partial.string${character} = "Value ${character}"
%     end
                    }

                    context("the encoded data") {
                        var encodedData: Data!

                        beforeEach {
                            let encoder = JSONEncoder()
                            encodedData = try? encoder.encode(partial)
                        }

                        it("should not be nil") {
                            expect(encodedData).toNot(beNil())
                        }

                        it("should be usable to decode Wrapped") {
                            do {
                                let decoder = JSONDecoder()
                                let decodedValue = try decoder.decode(CodableType.self, from: encodedData)

%     for characterIndex in parametersRange:
%         character = string.ascii_uppercase[characterIndex]
                                expect(decodedValue.string${character}) == "Value ${character}"
%     end
                            } catch {
                                fail("Should not throw: \(error)")
                            }
                        }

                        it("should be usable to decode Partial<Wrapped>") {
                            do {
                                let decoder = JSONDecoder()
                                let decodedValue = try decoder.decode(Partial<CodableType>.self, from: encodedData)

%     for characterIndex in parametersRange:
%         character = string.ascii_uppercase[characterIndex]
                                expect(decodedValue.string${character}) == "Value ${character}"
%     end
                            } catch {
                                fail("Should not throw: \(error)")
                            }
                        }
                    }
                }
            }
% end
        }
    }
}
